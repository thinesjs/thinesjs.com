service: ${env:SERVICE_NAME}

useDotenv: true

plugins:
    - serverless-finch
    - serverless-deployment-bucket
    - serverless-certificate-creator

provider:
    name: aws
    stage: ${self:custom.stage}
    region: ${self:custom.region}
    profile: ${env:AWS_PROFILE, 'default'}
    deploymentBucket:
        name: ${self:custom.domain}.${self:custom.region}.deployment
        blockPublicAccess: true
        serverSideEncryption: AES256
    deploymentPrefix: serverless
    iam:
        deploymentRole: ${env:DEPLOY_ROLE, ''}
    stackTags:
        app: ${env:APP_NAME}

custom:
    stage: ${opt:stage, 'staging'}
    region: ${env:AWS_REGION, 'ap-southeast-1'}
    deploymentBucket:
        blockPublicAccess: true
    domain: ${env:DOMAIN}
    webDomain: ${self:custom.domain}
    webDomains:
        www: www.${self:custom.domain}
    client:
        distributionFolder: ./dist
        bucketName: ${self:custom.webDomain}
        sse: AES256
        manageResources: false
        objectHeaders:
            "*.html":
                - name: Cache-Control
                  value: no-cache
    customCertificate:
        certificateName: "${self:custom.domain}"
        hostedZoneNames: "${self:custom.domain}."
        subjectAlternativeNames:
            - "${self:custom.webDomains.www}"
        rewriteRecords: false

resources:
    Conditions:
        IsProd:
            Fn::Equals:
                - ${self:custom.stage}
                - production
    Resources:
        # S3 Bucket
        WebAppS3Bucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.webDomain}
                PublicAccessBlockConfiguration:
                    BlockPublicAcls: true
                    IgnorePublicAcls: true
                    BlockPublicPolicy: true
                    RestrictPublicBuckets: true
                LifecycleConfiguration:
                    Rules:
                        - Id: "auto-clean-older-deployment-after-expired"
                          Status: !If [IsProd, "Enabled", "Disabled"]
                          ExpirationInDays: 40
                BucketEncryption:
                    ServerSideEncryptionConfiguration:
                        - ServerSideEncryptionByDefault:
                              SSEAlgorithm: "AES256"
        WebAppS3BucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket: !Sub ${WebAppS3Bucket}
                PolicyDocument:
                    Statement:
                        - Action: s3:GetObject
                          Effect: Allow
                          Resource: !Sub "${WebAppS3Bucket.Arn}/*"
                          Principal:
                              Service: cloudfront.amazonaws.com
                          Condition:
                              StringEquals:
                                  AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebAppCloudFrontDistribution}
        RedirectWWWS3Bucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.webDomains.www}
                PublicAccessBlockConfiguration:
                    BlockPublicAcls: true
                    IgnorePublicAcls: true
                    BlockPublicPolicy: true
                    RestrictPublicBuckets: true
                BucketEncryption:
                    ServerSideEncryptionConfiguration:
                        - ServerSideEncryptionByDefault:
                              SSEAlgorithm: "AES256"
                WebsiteConfiguration:
                    RedirectAllRequestsTo:
                        HostName: ${self:custom.webDomain}
                        Protocol: https

        # CloudFront Distribution
        WebAppCloudFrontDistribution:
            Type: AWS::CloudFront::Distribution
            Properties:
                DistributionConfig:
                    Aliases:
                        - ${self:custom.webDomain}
                    Enabled: True
                    DefaultRootObject: index.html
                    HttpVersion: http2
                    ViewerCertificate:
                        AcmCertificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}
                        MinimumProtocolVersion: TLSv1.2_2021
                        SslSupportMethod: sni-only
                    DefaultCacheBehavior:
                        TargetOriginId: WebAppBucketOrigin
                        Compress: True
                        CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
                        ViewerProtocolPolicy: redirect-to-https
                    CustomErrorResponses:
                        - ErrorCode: 403
                          ErrorCachingMinTTL: 60
                          ResponseCode: 200
                          ResponsePagePath: /index.html
                        - ErrorCode: 404
                          ErrorCachingMinTTL: 60
                          ResponseCode: 200
                          ResponsePagePath: /index.html

                    Origins:
                        - Id: WebAppBucketOrigin
                          DomainName: !Sub ${WebAppS3Bucket.DomainName}
                          S3OriginConfig:
                              OriginAccessIdentity: ""
                          OriginAccessControlId: !GetAtt WebAppCloudFrontOriginAccessControl.Id

        RedirectWWWCloudFrontDistribution:
            Type: AWS::CloudFront::Distribution
            Properties:
                DistributionConfig:
                    Aliases:
                        - ${self:custom.webDomains.www}
                    Enabled: True
                    HttpVersion: http2
                    ViewerCertificate:
                        AcmCertificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}
                        MinimumProtocolVersion: TLSv1.2_2021
                        SslSupportMethod: sni-only
                    DefaultCacheBehavior:
                        TargetOriginId: RedirectWWWBucketOrigin
                        Compress: True
                        CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
                        ViewerProtocolPolicy: redirect-to-https
                    Origins:
                        - Id: RedirectWWWBucketOrigin
                          DomainName: ${self:custom.webDomains.www}.s3-website-${aws:region}.amazonaws.com
                          CustomOriginConfig:
                              HTTPPort: 80
                              HTTPSPort: 443
                              OriginKeepaliveTimeout: 30
                              OriginProtocolPolicy: http-only
                              OriginReadTimeout: 5

        WebAppCloudFrontOriginAccessControl:
            Type: AWS::CloudFront::OriginAccessControl
            Properties:
                OriginAccessControlConfig:
                    Description: Default Origin Access Control
                    Name: !Ref AWS::StackName
                    OriginAccessControlOriginType: s3
                    SigningBehavior: no-override
                    SigningProtocol: sigv4

        # Route53
        WebAppRoute53:
            Type: AWS::Route53::RecordSet
            DependsOn:
                - WebAppCloudFrontDistribution
            Properties:
                Name: ${self:custom.webDomain}
                HostedZoneName: "${self:custom.domain}."
                Type: A
                AliasTarget:
                    HostedZoneId: Z2FDTNDATAQYW2
                    DNSName: !Sub "${WebAppCloudFrontDistribution.DomainName}"
        RedirectWebAppRoute53:
            Type: AWS::Route53::RecordSet
            DependsOn:
                - RedirectWWWCloudFrontDistribution
            Properties:
                Name: ${self:custom.webDomains.www}
                HostedZoneName: "${self:custom.domain}."
                Type: A
                AliasTarget:
                    HostedZoneId: Z2FDTNDATAQYW2
                    EvaluateTargetHealth: false
                    DNSName: !Sub "${RedirectWWWCloudFrontDistribution.DomainName}"
    Outputs:
        WebAppS3Bucket:
            Value: !Sub "${WebAppS3Bucket}"

        WebAppCloudFrontDistribution:
            Value: !Sub "${WebAppCloudFrontDistribution.DomainName}"

        WebDomain:
            Value: ${self:custom.webDomain}
